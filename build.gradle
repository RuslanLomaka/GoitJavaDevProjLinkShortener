plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
}

group = 'org.decepticons'
version = '0.0.1-SNAPSHOT'
description = 'linkShortener'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories { mavenCentral() }

ext {
    // Tool versions
    checkstyleVersion = '11.0.1'
    lombokVersion = '1.18.38'
    springdocVersion = '2.8.12'
    jjwtVersion = '0.11.5'
    flywayVersion = '10.17.2'   // optional, but good to pin
    testcontainersVersion = '1.20.3'
}

checkstyle {
    toolVersion = checkstyleVersion
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    showViolations = true
    ignoreFailures = false
}
tasks.withType(Checkstyle).configureEach {
    reports { xml.required = true; html.required = true }
}
tasks.named("check")   { dependsOn(tasks.named("checkstyleMain")) }
tasks.named("build")   { dependsOn(tasks.named("checkstyleMain")) }
tasks.named("bootRun") { dependsOn(tasks.named("checkstyleMain")) }

dependencies {
    // Core Spring Boot
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-web"

    // DB & Migrations
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql"
    implementation "me.paulschwarz:spring-dotenv:4.0.0"

    // OpenAPI / Swagger UI
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // JSON Web Token
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

    // Testing
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
}

test { useJUnitPlatform() }
